from collections import deque
class Graph:
   def __init__(self, adjac_lis):
       self.adjac_lis = adjac_lis
   def get_neighbors(self, v):
       return self.adjac_lis[v]
   def h(self, n):
       H = {
           'A': 99,
           'B': 15,
           'C': 3,
           'D': 2
       }
       return H[n]
   def a_star_algorithm(self, start, stop):

       open_lst = set([start])
       closed_lst = set([])
       poo = {}
       poo[start] = 0
       par = {}
       par[start] = start
       while len(open_lst) > 0:
           n = None
           for v in open_lst:
               if n == None or poo[v] + self.h(v) < poo[n] + self.h(n):
                   n = v;
           if n == None:
               print('Path does not exist!')
               return None
           if n == stop:
               reconst_path = []
               while par[n] != n:
                   reconst_path.append(n)
                   n = par[n]
               reconst_path.append(start)
               reconst_path.reverse()
               print('Path found: {}'.format(reconst_path))
               return reconst_path
           for (m, weight) in self.get_neighbors(n):
               if m not in open_lst and m not in closed_lst:
                   open_lst.add(m)
                   par[m] = n
                   poo[m] = poo[n] + weight
               else:
                   if poo[m] < poo[n] + weight:
                       poo[m] = poo[n] + weight
                       par[m] = n
                       if m in closed_lst:
                           closed_lst.remove(m)
                           open_lst.add(m)
           open_lst.remove(n)
           closed_lst.add(n)
       print('Path does not exist!')
       return None
adjac_lis = {
   'A': [('B', 1), ('C', 5)],
   'B': [('D', 7)],
   'C': [('D', 10)]
}
graph1 = Graph(adjac_lis)
graph1.a_star_algorithm('A', 'D')

//alternative: wHY5ulRe9

/*

THEORY:
It is informed search technique. It uses additional information beyond problem formulation and
tree. Search is based on Evaluation function f(n).Evaluation function is based on both heuristic
function h(n) and g(n).
f(n)=g(n) + h(n)
It uses two queues for its implementation: open, close Queue. Open queue is a priority queue
which is arranged in ascending order of f(n)

CONCLUSION:
A good example of heuristic search is A* search algorithm. The performance of such
heuristic search algorithm depends upon the quality of heuristic function. A* algorithm is
executed and the path with minimum cost from source node to destination node is
calculated.

*/
